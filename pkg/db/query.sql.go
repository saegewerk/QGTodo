// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package DB

import (
	"context"
	"database/sql"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks ( fk_user,title, comment, created_at, updated_at)
VALUES ($1,$2,$3,$4,$5)
RETURNING id, fk_user, title, comment, done, created_at, updated_at, deleted_at
`

type CreateTaskParams struct {
	FkUser    int32
	Title     sql.NullString
	Comment   sql.NullString
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask,
		arg.FkUser,
		arg.Title,
		arg.Comment,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.FkUser,
		&i.Title,
		&i.Comment,
		&i.Done,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, password, created_at, updated_at)
VALUES ( $1, $2, $3, $4)
RETURNING id, username, password, created_at, updated_at, deleted_at
`

type CreateUserParams struct {
	Username  sql.NullString
	Password  []byte
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.Password,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE
FROM tasks
WHERE id = $1
`

func (q *Queries) DeleteTask(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteTask, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE
FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, username, password, created_at, updated_at, deleted_at
FROM users
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByName = `-- name: GetUserByName :one
SELECT id, username, password, created_at, updated_at, deleted_at
FROM users
WHERE username = $1
LIMIT 1
`

func (q *Queries) GetUserByName(ctx context.Context, username sql.NullString) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByName, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listTasksFromUser = `-- name: ListTasksFromUser :many
SELECT id, fk_user, title, comment, done, created_at, updated_at, deleted_at FROM tasks WHERE fk_user=$1
`

func (q *Queries) ListTasksFromUser(ctx context.Context, fkUser int32) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, listTasksFromUser, fkUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.FkUser,
			&i.Title,
			&i.Comment,
			&i.Done,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT username
FROM users
`

func (q *Queries) ListUsers(ctx context.Context) ([]sql.NullString, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []sql.NullString
	for rows.Next() {
		var username sql.NullString
		if err := rows.Scan(&username); err != nil {
			return nil, err
		}
		items = append(items, username)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const paranoidDeleteTask = `-- name: ParanoidDeleteTask :exec
UPDATE users SET deleted_at=$1
`

func (q *Queries) ParanoidDeleteTask(ctx context.Context, deletedAt sql.NullTime) error {
	_, err := q.db.ExecContext(ctx, paranoidDeleteTask, deletedAt)
	return err
}

const paranoidDeleteUser = `-- name: ParanoidDeleteUser :exec
UPDATE users
SET deleted_at=$1
`

func (q *Queries) ParanoidDeleteUser(ctx context.Context, deletedAt sql.NullTime) error {
	_, err := q.db.ExecContext(ctx, paranoidDeleteUser, deletedAt)
	return err
}

const paranoidListTasksFromUser = `-- name: ParanoidListTasksFromUser :many
SELECT id, fk_user, title, comment, done, created_at, updated_at, deleted_at FROM tasks
WHERE deleted_at
IS NULL AND fk_user=$1
`

func (q *Queries) ParanoidListTasksFromUser(ctx context.Context, fkUser int32) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, paranoidListTasksFromUser, fkUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.FkUser,
			&i.Title,
			&i.Comment,
			&i.Done,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const paranoidListUsers = `-- name: ParanoidListUsers :many
SELECT username
FROM users
WHERE deleted_at IS NULL
`

func (q *Queries) ParanoidListUsers(ctx context.Context) ([]sql.NullString, error) {
	rows, err := q.db.QueryContext(ctx, paranoidListUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []sql.NullString
	for rows.Next() {
		var username sql.NullString
		if err := rows.Scan(&username); err != nil {
			return nil, err
		}
		items = append(items, username)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTaskTitle = `-- name: UpdateTaskTitle :exec
UPDATE tasks
SET title=$1
`

func (q *Queries) UpdateTaskTitle(ctx context.Context, title sql.NullString) error {
	_, err := q.db.ExecContext(ctx, updateTaskTitle, title)
	return err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users
SET password=$1
`

func (q *Queries) UpdateUserPassword(ctx context.Context, password []byte) error {
	_, err := q.db.ExecContext(ctx, updateUserPassword, password)
	return err
}
